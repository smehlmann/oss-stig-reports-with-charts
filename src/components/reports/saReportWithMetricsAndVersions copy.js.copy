import * as reportGetters from './reportGetters.js';
import * as reportUtils from './reportUtils.js';

async function runSAReportWithMetricsAndVersions(auth, emassMap) {

    try {

        console.log(`runSAReportWithMetricsAndVersions: Requesting STIG Manager Collections`);

        const currentQuarter = reportUtils.getCurrentQuarter();

        var metrics = [];
        var labels = [];
        let labelMap = new Map();

        var rows = [];
        /*var rows = [
            {

                

                collectionName: 'Collection',
                asset: 'Asset',
                deviveType: 'Device-Asset',
                primOwner: 'Primary Owner',
                sysAdmin: 'Sys Admin',
                rmfAction: "RMF Action",
                isso: "ISSO",
                ccbSAActions: 'CCB_SA_Actions',
                other: "OTHER",
                benchmarks: 'STIG Benchmark',
                latestRev: 'Latest Revision',
                prevRev: 'Previous Revision',
                quarterVer: 'Current Quarter STIG Version',
                assessed: 'Assessed',
                submitted: 'Submitted',
                accepted: 'Accepted',
                rejected: 'Rejected',
                cat3: 'CAT3',
                cat2: 'CAT2',
                cat1: 'CAT1'
            }
        ];*/

        const headers = [
            { label: 'Collection', key: 'collectionName' },
            { label: 'Asset', key: 'asset' },
            { label: 'Device-Asset', key: 'deviveType' },
            { label: 'Primary Owner', key: 'primOwner' },
            { label: 'Sys Admin', key: 'sysAdmin' },
            { label: "RMF Action", key: 'rmfAction' },
            { label: "ISSO", key: 'isso' },
            { label: 'CCB_SA_Actions', key: 'ccbSAActions' },
            { label: "Orher", key: 'other' },
            { label: 'STIG Benchmark', key: 'benchmarks' },
            { label: 'Latest Revision', key: 'latestRev' },
            { label: 'Previous Revision', key: 'prevRev' },
            { label: 'Current Quarter STIG Version', key: 'quarterVer' },
            { label: 'Assessed', key: 'assessed' },
            { label: 'Submitted', key: 'submitted' },
            { label: 'Accepted', key: 'accepted' },
            { label: 'Rejected', key: 'rejected' },
            { label: 'CAT3', key: 'cat3' },
            { label: 'CAT2', key: 'cat2' },
            { label: 'CAT1', key: 'cat1' }
        ];

        const emassKeysArray = Array.from(emassMap.keys());
        for (var iEmass = 0; iEmass < emassKeysArray.length; iEmass++) {
            console.log('emassKeysArray[iEmass]: ' + emassKeysArray[iEmass]);
            var collections = emassMap.get(emassKeysArray[iEmass]);

            for (var i = 0; i < collections.length; i++) {
                var collectionName = collections[i].name;
                console.log('collection name: ' + collectionName);

                if (!collectionName.startsWith('NP_C')) {
                    continue;
                }

                labelMap.clear();
                labels.length = 0;

                labels = await reportGetters.getLabelsByCollection(auth, collections[i].collectionId);
                for (var x = 0; x < labels.data.length; x++) {
                    labelMap.set(labels.data[x].labelId, labels.data[x].description);
                }


                metrics = await reportGetters.getCollectionMerticsAggreatedByAsset(auth, collections[i].collectionId);
                console.log('num metrics: ' + metrics.data.length);

                for (var iMetrics = 0; iMetrics < metrics.data.length; iMetrics++) {

                    var benchmarkIDs = metrics.data[iMetrics].benchmarkIds;
                    console.log('num benchmarks: ' + benchmarkIDs.length);

                    for (var idx = 0; idx < benchmarkIDs.length; idx++) {

                        console.log('benchmarkId: ' + benchmarkIDs[idx]);

                        var revisions = await reportGetters.getBenchmarkRevisions(auth, benchmarkIDs[idx]);

                        var latestRev = '';
                        var prevRev = '';
                        var latestRevDate = '';
                        if (revisions) {
                            for (var bmIdx = 0; bmIdx < revisions.data.length && bmIdx < 2; bmIdx++) {
                                if (bmIdx === 0) {
                                    latestRev = revisions.data[bmIdx].revisionStr;
                                    latestRevDate = revisions.data[bmIdx].benchmarkDate;
                                }
                                else if (bmIdx === 1) {
                                    prevRev = revisions.data[bmIdx].revisionStr;
                                }
                            }
                        }
                        else {
                            var stig = await reportGetters.getStigById(auth, benchmarkIDs[idx]);

                            latestRev = stig.data.lastRevisionStr;
                            latestRevDate = stig.data.lastRevisionDate;
                        }

                        var myData = getRow(
                            collectionName,
                            metrics.data[iMetrics],
                            labelMap,
                            latestRev,
                            latestRevDate,
                            prevRev,
                            benchmarkIDs[idx],
                            currentQuarter);

                        rows.push(myData);

                    } // end for each benchmark
                } // end for each iMetrics
            } // end for each collection
        } // end for each iEmass

        const returnData = { headers: headers, rows: rows }
        //return rows;
        return returnData;
    }
    catch (e) {
        console.log(e)
    }
}

function getRow(collectionName,
    metrics,
    labelMap,
    latestRev,
    latestRevDate,
    prevRev,
    benchmarkID,
    currentQuarter) {

    const quarterVer = reportUtils.getVersionForQuarter(currentQuarter, latestRevDate, latestRev);

    const numAssessments = metrics.metrics.assessments;
    const numAssessed = metrics.metrics.assessed;
    const numSubmitted = metrics.metrics.statuses.submitted;
    const numAccepted = metrics.metrics.statuses.accepted;
    const numRejected = metrics.metrics.statuses.rejected;

    const collectionMetadata = reportUtils.getMetadata(labelMap, metrics);

    var avgAssessed = 0;
    var avgSubmitted = 0;
    var avgAccepted = 0;
    var avgRejected = 0;
    var temp = 0;

    if (numAssessments) {
        temp = (numAssessed / numAssessments) * 100;
        avgAssessed = temp.toFixed(2);

        temp = ((numSubmitted + numAccepted + numRejected) / numAssessments) * 100;
        avgSubmitted = temp.toFixed(2);

        temp = (numAccepted / numAssessments) * 100;
        avgAccepted = temp.toFixed(2);

        temp = (numRejected / numAssessments) * 100;
        avgRejected = temp.toFixed(2);

    }

    const sumOfCat3 = metrics.metrics.findings.low;
    const sumOfCat2 = metrics.metrics.findings.medium;
    const sumOfCat1 = metrics.metrics.findings.high;

    var rowData = {
        collectionName: collectionName,
        asset: metrics.name,
        deviveType: collectionMetadata.device,
        primOwner: collectionMetadata.primOwner,
        sysAdmin: collectionMetadata.sysAdmin,
        rmfAction: collectionMetadata.rmfAction,
        isso: collectionMetadata.isso,
        ccbSAActions: collectionMetadata.ccbSAActions,
        other: collectionMetadata.other,
        benchmarks: benchmarkID,
        latestRev: latestRev,
        prevRev: prevRev,
        quarterVer: quarterVer,
        assessed: avgAssessed + '%',
        submitted: avgSubmitted + '%',
        accepted: avgAccepted + '%',
        rejected: avgRejected + '%',
        cat3: sumOfCat3,
        cat2: sumOfCat2,
        cat1: sumOfCat1
    }

    return rowData;

}

export { runSAReportWithMetricsAndVersions };